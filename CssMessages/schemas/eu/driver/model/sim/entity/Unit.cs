// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.entity
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class Unit : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"Unit\",\"namespace\":\"eu.driver.model.sim.entity\",\"fields\":" +
				"[{\"name\":\"id\",\"doc\":\"Unique identifier of the unit\",\"type\":\"string\"},{\"name\":\"it" +
				"ems\",\"doc\":\"List of items that belong to the unit\",\"type\":{\"type\":\"array\",\"items" +
				"\":{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"eu.driver.model.sim.entity\",\"field" +
				"s\":[{\"name\":\"id\",\"doc\":\"Unique identifier of the item\",\"type\":\"string\"},{\"name\":" +
				"\"location\",\"doc\":\"Location of the item\",\"type\":{\"type\":\"record\",\"name\":\"Location" +
				"\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"" +
				"In decimal degrees, ranging from [-90, 90] where 0 is the equator\",\"type\":\"doubl" +
				"e\"},{\"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging from (-180, 180] wher" +
				"e 0 is the Prime Meridian (line going through the geographic north, Greenwich, a" +
				"nd the geographic south)\",\"type\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional in" +
				" meters, where 0 is the surface of the WGS84-based ellipsoid\",\"default\":null,\"ty" +
				"pe\":[\"null\",\"double\"]}]}},{\"name\":\"orientation\",\"doc\":\"Optional orientation of t" +
				"he item\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Orientation\",\"na" +
				"mespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In decimal" +
				" degrees, ranging from [0, 360) where 0 is pointing towards the geographic north" +
				". The yaw value is applied in a clockwise rotation over the item’s heading/yaw-a" +
				"xis. A yaw value of 90 makes the item face east, while a yaw of 270 makes it fac" +
				"e west\",\"type\":\"double\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees, ranging from" +
				" [-90, 90] where 0 is perpendicular to the line between the item’s location and " +
				"the centre of the WGS84-based ellipsoid. The pitch value is applied in a counter" +
				"-clockwise rotation over the item’s pitch-axis. A pitch value of 45 makes the it" +
				"em face 45 degrees upwards, while a pitch of -20 makes it face 20 degrees downwa" +
				"rds\",\"type\":\"double\"},{\"name\":\"roll\",\"doc\":\"In decimal degrees, ranging from (-1" +
				"80, 180] where 0 is perpendicular to the line between the item’s location and th" +
				"e centre of the WGS84-based ellipsoid. The roll value is applied in a clockwise " +
				"rotation over the item’s roll/bank-axis. A roll value of 45 makes the item roll " +
				"45 degrees to the right, while a roll of -50 makes it roll 50 degrees to the lef" +
				"t\",\"type\":\"double\"}]}]},{\"name\":\"velocity\",\"doc\":\"Optional velocity of the item\"" +
				",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Velocity\",\"namespace\":\"e" +
				"u.driver.model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In decimal degrees, r" +
				"anging from [0, 360) where 0 is pointing towards the geographic north. The yaw v" +
				"alue is applied in a clockwise rotation over the item’s heading/yaw-axis. A yaw " +
				"value of 90 makes the item face east, while a yaw of 270 makes it face west\",\"ty" +
				"pe\":\"double\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees, ranging from [-90, 90] " +
				"where 0 is perpendicular to the line between the item’s location and the centre " +
				"of the WGS84-based ellipsoid. The pitch value is applied in a counter-clockwise " +
				"rotation over the item’s pitch-axis. A pitch value of 45 makes the item face 45 " +
				"degrees upwards, while a pitch of -20 makes it face 20 degrees downwards\",\"type\"" +
				":\"double\"},{\"name\":\"magnitude\",\"doc\":\"In meter per seconds, ranging from [0, inf" +
				"inity) where 0 is standing still relative to the earth’s rotation\",\"type\":\"doubl" +
				"e\"}]}]},{\"name\":\"name\",\"doc\":\"Optional name of the item\",\"default\":null,\"type\":[" +
				"\"null\",\"string\"]},{\"name\":\"type\",\"doc\":\"Optional type of the item\",\"default\":nul" +
				"l,\"type\":[\"null\",\"string\"]},{\"name\":\"owner\",\"doc\":\"Optional unique identifier of" +
				" the connected application owning the item\",\"default\":null,\"type\":[\"null\",\"strin" +
				"g\"]},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in milliseconds marking" +
				" the time the update was performed\",\"default\":null,\"type\":[\"null\",\"long\"],\"logic" +
				"alType\":\"timestamp-millis\"},{\"name\":\"tags\",\"doc\":\"Optional map containing item s" +
				"pecific information: key – unique name of the specific property; value – value o" +
				"f that property\",\"default\":null,\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]" +
				"}]}}},{\"name\":\"name\",\"doc\":\"Optional name of the unit\",\"default\":null,\"type\":[\"n" +
				"ull\",\"string\"]},{\"name\":\"type\",\"doc\":\"Optional type of the unit\",\"default\":null," +
				"\"type\":[\"null\",\"string\"]},{\"name\":\"owner\",\"doc\":\"Optional unique identifier of t" +
				"he connected application owning the unit\",\"default\":null,\"type\":[\"null\",\"string\"" +
				"]},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in milliseconds marking t" +
				"he time the update was performed\",\"default\":null,\"type\":[\"null\",\"long\"],\"logical" +
				"Type\":\"timestamp-millis\"},{\"name\":\"tags\",\"doc\":\"Optional map containing unit spe" +
				"cific information: key – unique name of the specific property; value – value of " +
				"that property\",\"default\":null,\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]}," +
				"{\"name\":\"location\",\"doc\":\"Optional location of the unit\",\"default\":null,\"type\":[" +
				"\"null\",\"eu.driver.model.sim.support.Location\"]},{\"name\":\"orientation\",\"doc\":\"Opt" +
				"ional orientation of the item\",\"default\":null,\"type\":[\"null\",\"eu.driver.model.si" +
				"m.support.Orientation\"]},{\"name\":\"velocity\",\"doc\":\"Optional velocity of the item" +
				"\",\"default\":null,\"type\":[\"null\",\"eu.driver.model.sim.support.Velocity\"]}],\"_comm" +
				"ent\":\"\"}");
		/// <summary>
		/// Unique identifier of the unit
		/// </summary>
		private string _id;
		/// <summary>
		/// List of items that belong to the unit
		/// </summary>
		private IList<eu.driver.model.sim.entity.Item> _items;
		/// <summary>
		/// Optional name of the unit
		/// </summary>
		private string _name;
		/// <summary>
		/// Optional type of the unit
		/// </summary>
		private string _type;
		/// <summary>
		/// Optional unique identifier of the connected application owning the unit
		/// </summary>
		private string _owner;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		/// <summary>
		/// Optional map containing unit specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		/// <summary>
		/// Optional location of the unit
		/// </summary>
		private eu.driver.model.sim.support.Location _location;
		/// <summary>
		/// Optional orientation of the item
		/// </summary>
		private eu.driver.model.sim.support.Orientation _orientation;
		/// <summary>
		/// Optional velocity of the item
		/// </summary>
		private eu.driver.model.sim.support.Velocity _velocity;
		public virtual Schema Schema
		{
			get
			{
				return Unit._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the unit
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// List of items that belong to the unit
		/// </summary>
		public IList<eu.driver.model.sim.entity.Item> items
		{
			get
			{
				return this._items;
			}
			set
			{
				this._items = value;
			}
		}
		/// <summary>
		/// Optional name of the unit
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// Optional type of the unit
		/// </summary>
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				this._type = value;
			}
		}
		/// <summary>
		/// Optional unique identifier of the connected application owning the unit
		/// </summary>
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				this._owner = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		/// <summary>
		/// Optional map containing unit specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		/// <summary>
		/// Optional location of the unit
		/// </summary>
		public eu.driver.model.sim.support.Location location
		{
			get
			{
				return this._location;
			}
			set
			{
				this._location = value;
			}
		}
		/// <summary>
		/// Optional orientation of the item
		/// </summary>
		public eu.driver.model.sim.support.Orientation orientation
		{
			get
			{
				return this._orientation;
			}
			set
			{
				this._orientation = value;
			}
		}
		/// <summary>
		/// Optional velocity of the item
		/// </summary>
		public eu.driver.model.sim.support.Velocity velocity
		{
			get
			{
				return this._velocity;
			}
			set
			{
				this._velocity = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.items;
			case 2: return this.name;
			case 3: return this.type;
			case 4: return this.owner;
			case 5: return this.timestamp;
			case 6: return this.tags;
			case 7: return this.location;
			case 8: return this.orientation;
			case 9: return this.velocity;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.items = (IList<eu.driver.model.sim.entity.Item>)fieldValue; break;
			case 2: this.name = (System.String)fieldValue; break;
			case 3: this.type = (System.String)fieldValue; break;
			case 4: this.owner = (System.String)fieldValue; break;
			case 5: this.timestamp = (System.Nullable<long>)fieldValue; break;
			case 6: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			case 7: this.location = (eu.driver.model.sim.support.Location)fieldValue; break;
			case 8: this.orientation = (eu.driver.model.sim.support.Orientation)fieldValue; break;
			case 9: this.velocity = (eu.driver.model.sim.support.Velocity)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
