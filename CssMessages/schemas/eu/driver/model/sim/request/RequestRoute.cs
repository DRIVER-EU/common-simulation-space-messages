// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.request
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class RequestRoute : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""RequestRoute"",""namespace"":""eu.driver.model.sim.request"",""fields"":[{""name"":""id"",""doc"":""Unique identifier of the request"",""type"":""string""},{""name"":""applicant"",""doc"":""Unique identifier of the connected application sending the request"",""type"":""string""},{""name"":""start"",""doc"":""Location that marks the start of the route"",""type"":{""type"":""record"",""name"":""Location"",""namespace"":""eu.driver.model.sim.support"",""fields"":[{""name"":""latitude"",""doc"":""In decimal degrees, ranging from [-90, 90] where 0 is the equator"",""type"":""double""},{""name"":""longitude"",""doc"":""In decimal degrees, ranging from (-180, 180] where 0 is the Prime Meridian (line going through the geographic north, Greenwich, and the geographic south)"",""type"":""double""},{""name"":""altitude"",""doc"":""Optional in meters, where 0 is the surface of the WGS84-based ellipsoid"",""default"":null,""type"":[""null"",""double""]}]}},{""name"":""end"",""doc"":""Location that marks the end of the route"",""type"":""eu.driver.model.sim.support.Location""},{""name"":""tags"",""doc"":""Optional map containing route request specific information: key – unique name of the specific property; value – value of that property"",""default"":null,""type"":[""null"",{""type"":""map"",""values"":""string""}]}],""_comment"":""""}");
		/// <summary>
		/// Unique identifier of the request
		/// </summary>
		private string _id;
		/// <summary>
		/// Unique identifier of the connected application sending the request
		/// </summary>
		private string _applicant;
		/// <summary>
		/// Location that marks the start of the route
		/// </summary>
		private eu.driver.model.sim.support.Location _start;
		/// <summary>
		/// Location that marks the end of the route
		/// </summary>
		private eu.driver.model.sim.support.Location _end;
		/// <summary>
		/// Optional map containing route request specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		public virtual Schema Schema
		{
			get
			{
				return RequestRoute._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the request
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Unique identifier of the connected application sending the request
		/// </summary>
		public string applicant
		{
			get
			{
				return this._applicant;
			}
			set
			{
				this._applicant = value;
			}
		}
		/// <summary>
		/// Location that marks the start of the route
		/// </summary>
		public eu.driver.model.sim.support.Location start
		{
			get
			{
				return this._start;
			}
			set
			{
				this._start = value;
			}
		}
		/// <summary>
		/// Location that marks the end of the route
		/// </summary>
		public eu.driver.model.sim.support.Location end
		{
			get
			{
				return this._end;
			}
			set
			{
				this._end = value;
			}
		}
		/// <summary>
		/// Optional map containing route request specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.applicant;
			case 2: return this.start;
			case 3: return this.end;
			case 4: return this.tags;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.applicant = (System.String)fieldValue; break;
			case 2: this.start = (eu.driver.model.sim.support.Location)fieldValue; break;
			case 3: this.end = (eu.driver.model.sim.support.Location)fieldValue; break;
			case 4: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
