// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.request
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class RequestStartInject : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""RequestStartInject"",""namespace"":""eu.driver.model.sim.request"",""fields"":[{""name"":""id"",""doc"":""Unique case-insensitive identifier of the request"",""type"":""string""},{""name"":""applicant"",""doc"":""Unique case-insensitive identifier of the connected application sending the request"",""type"":""string""},{""name"":""inject"",""doc"":""Case-insensitive name of the inject that is requested to start"",""type"":""string""},{""name"":""tags"",""doc"":""Optional map containing start inject request specific information: key – unique name of the specific property; value – value of that property"",""default"":null,""type"":[""null"",{""type"":""map"",""values"":""string""}]}]}");
		/// <summary>
		/// Unique case-insensitive identifier of the request
		/// </summary>
		private string _id;
		/// <summary>
		/// Unique case-insensitive identifier of the connected application sending the request
		/// </summary>
		private string _applicant;
		/// <summary>
		/// Case-insensitive name of the inject that is requested to start
		/// </summary>
		private string _inject;
		/// <summary>
		/// Optional map containing start inject request specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		public virtual Schema Schema
		{
			get
			{
				return RequestStartInject._SCHEMA;
			}
		}
		/// <summary>
		/// Unique case-insensitive identifier of the request
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Unique case-insensitive identifier of the connected application sending the request
		/// </summary>
		public string applicant
		{
			get
			{
				return this._applicant;
			}
			set
			{
				this._applicant = value;
			}
		}
		/// <summary>
		/// Case-insensitive name of the inject that is requested to start
		/// </summary>
		public string inject
		{
			get
			{
				return this._inject;
			}
			set
			{
				this._inject = value;
			}
		}
		/// <summary>
		/// Optional map containing start inject request specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.applicant;
			case 2: return this.inject;
			case 3: return this.tags;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.applicant = (System.String)fieldValue; break;
			case 2: this.inject = (System.String)fieldValue; break;
			case 3: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
