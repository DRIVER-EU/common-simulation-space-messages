// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.request
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class RequestMove : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"RequestMove\",\"namespace\":\"eu.driver.model.sim.request\",\"" +
				"fields\":[{\"name\":\"id\",\"doc\":\"Unique case-insensitive identifier of the request\"," +
				"\"type\":\"string\"},{\"name\":\"applicant\",\"doc\":\"Unique case-insensitive identifier o" +
				"f the connected application sending the request\",\"type\":\"string\"},{\"name\":\"entit" +
				"ies\",\"doc\":\"Unique identifiers of the entities the applicant requests to be move" +
				"d. This also allows multiple entities to move in a convoy\",\"type\":{\"type\":\"array" +
				"\",\"items\":\"string\"}},{\"name\":\"destination\",\"doc\":\"Unique identifier of the entit" +
				"y the applicant requests the given entities to move to\",\"type\":\"string\"},{\"name\"" +
				":\"waypoints\",\"doc\":\"Optional list of locations to visit consecutively along the " +
				"movement\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Location\",\"nam" +
				"espace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"In dec" +
				"imal degrees, ranging from [-90, 90] where 0 is the equator\",\"type\":\"double\"},{\"" +
				"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging from (-180, 180] where 0 is" +
				" the Prime Meridian (line going through the geographic north, Greenwich, and the" +
				" geographic south)\",\"type\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional in meter" +
				"s, where 0 is the surface of the WGS84-based ellipsoid, or another agreed upon c" +
				"ommon ground level (specified inside the configuration guidelines). A positive n" +
				"umber indicates a location outside the ellipsoid (or above the ground level), wh" +
				"ile a negative number indicates a location inside the ellipsoid (or below the gr" +
				"ound level). If an altitude is not provided, it is presumed that the location is" +
				" at the ground level of the provided latitude and longitude coordinates\",\"defaul" +
				"t\":null,\"type\":[\"null\",\"double\"]}]}}},{\"name\":\"moveType\",\"doc\":\"Optional type of" +
				" movement\",\"type\":{\"type\":\"enum\",\"name\":\"MoveType\",\"namespace\":\"eu.driver.model." +
				"sim.support\",\"symbols\":[\"Straight\",\"CrossCountry\",\"OnlyRoads\",\"RoadsAndCrossCoun" +
				"try\"]}},{\"name\":\"route\",\"doc\":\"Optional feature collection identifier of the pre" +
				"ferred route that should be followed. This property should not be used together " +
				"with the waypoints property\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"t" +
				"ags\",\"doc\":\"Optional map containing transport request specific information: key " +
				"– unique name of the specific property; value – value of that property\",\"default" +
				"\":null,\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]}]}");
		/// <summary>
		/// Unique case-insensitive identifier of the request
		/// </summary>
		private string _id;
		/// <summary>
		/// Unique case-insensitive identifier of the connected application sending the request
		/// </summary>
		private string _applicant;
		/// <summary>
		/// Unique identifiers of the entities the applicant requests to be moved. This also allows multiple entities to move in a convoy
		/// </summary>
		private IList<System.String> _entities;
		/// <summary>
		/// Unique identifier of the entity the applicant requests the given entities to move to
		/// </summary>
		private string _destination;
		/// <summary>
		/// Optional list of locations to visit consecutively along the movement
		/// </summary>
		private IList<eu.driver.model.sim.support.Location> _waypoints;
		/// <summary>
		/// Optional type of movement
		/// </summary>
		private eu.driver.model.sim.support.MoveType _moveType;
		/// <summary>
		/// Optional feature collection identifier of the preferred route that should be followed. This property should not be used together with the waypoints property
		/// </summary>
		private string _route;
		/// <summary>
		/// Optional map containing transport request specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		public virtual Schema Schema
		{
			get
			{
				return RequestMove._SCHEMA;
			}
		}
		/// <summary>
		/// Unique case-insensitive identifier of the request
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Unique case-insensitive identifier of the connected application sending the request
		/// </summary>
		public string applicant
		{
			get
			{
				return this._applicant;
			}
			set
			{
				this._applicant = value;
			}
		}
		/// <summary>
		/// Unique identifiers of the entities the applicant requests to be moved. This also allows multiple entities to move in a convoy
		/// </summary>
		public IList<System.String> entities
		{
			get
			{
				return this._entities;
			}
			set
			{
				this._entities = value;
			}
		}
		/// <summary>
		/// Unique identifier of the entity the applicant requests the given entities to move to
		/// </summary>
		public string destination
		{
			get
			{
				return this._destination;
			}
			set
			{
				this._destination = value;
			}
		}
		/// <summary>
		/// Optional list of locations to visit consecutively along the movement
		/// </summary>
		public IList<eu.driver.model.sim.support.Location> waypoints
		{
			get
			{
				return this._waypoints;
			}
			set
			{
				this._waypoints = value;
			}
		}
		/// <summary>
		/// Optional type of movement
		/// </summary>
		public eu.driver.model.sim.support.MoveType moveType
		{
			get
			{
				return this._moveType;
			}
			set
			{
				this._moveType = value;
			}
		}
		/// <summary>
		/// Optional feature collection identifier of the preferred route that should be followed. This property should not be used together with the waypoints property
		/// </summary>
		public string route
		{
			get
			{
				return this._route;
			}
			set
			{
				this._route = value;
			}
		}
		/// <summary>
		/// Optional map containing transport request specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.applicant;
			case 2: return this.entities;
			case 3: return this.destination;
			case 4: return this.waypoints;
			case 5: return this.moveType;
			case 6: return this.route;
			case 7: return this.tags;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.applicant = (System.String)fieldValue; break;
			case 2: this.entities = (IList<System.String>)fieldValue; break;
			case 3: this.destination = (System.String)fieldValue; break;
			case 4: this.waypoints = (IList<eu.driver.model.sim.support.Location>)fieldValue; break;
			case 5: this.moveType = (eu.driver.model.sim.support.MoveType)fieldValue; break;
			case 6: this.route = (System.String)fieldValue; break;
			case 7: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
