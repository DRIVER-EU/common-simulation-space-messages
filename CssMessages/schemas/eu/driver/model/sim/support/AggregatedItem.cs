// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.support
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class AggregatedItem : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"AggregatedItem\",\"namespace\":\"eu.driver.model.sim.support" +
				"\",\"fields\":[{\"name\":\"location\",\"doc\":\"Optional location of the item\",\"default\":n" +
				"ull,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"eu.driver.mod" +
				"el.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"In decimal degrees, ranging " +
				"from [-90, 90] where 0 is the equator\",\"type\":\"double\"},{\"name\":\"longitude\",\"doc" +
				"\":\"In decimal degrees, ranging from (-180, 180] where 0 is the Prime Meridian (l" +
				"ine going through the geographic north, Greenwich, and the geographic south)\",\"t" +
				"ype\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional in meters, where 0 is the surf" +
				"ace of the WGS84-based ellipsoid, or another agreed upon common ground level (sp" +
				"ecified inside the configuration guidelines). A positive number indicates a loca" +
				"tion outside the ellipsoid (or above the ground level), while a negative number " +
				"indicates a location inside the ellipsoid (or below the ground level). If an alt" +
				"itude is not provided, it is presumed that the location is at the ground level o" +
				"f the provided latitude and longitude coordinates\",\"default\":null,\"type\":[\"null\"" +
				",\"double\"]}]}]},{\"name\":\"orientation\",\"doc\":\"Optional orientation of the item\",\"" +
				"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Orientation\",\"namespace\":\"" +
				"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In decimal degrees, " +
				"ranging from [0, 360) where 0 is pointing towards the geographic north. The yaw " +
				"value is applied in a clockwise rotation over the item’s heading/yaw-axis. A yaw" +
				" value of 90 makes the item face east, while a yaw of 270 makes it face west\",\"t" +
				"ype\":\"double\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees, ranging from [-90, 90]" +
				" where 0 is perpendicular to the line crossing the item’s location and the centr" +
				"e of the WGS84-based ellipsoid. The pitch value is applied in a counter-clockwis" +
				"e rotation over the item’s pitch-axis. A pitch value of 45 makes the item face 4" +
				"5 degrees upwards, while a pitch of -20 makes it face 20 degrees downwards\",\"typ" +
				"e\":\"double\"},{\"name\":\"roll\",\"doc\":\"In decimal degrees, ranging from (-180, 180] " +
				"where 0 is perpendicular to the line crossing the item’s location and the centre" +
				" of the WGS84-based ellipsoid. The roll value is applied in a clockwise rotation" +
				" over the item’s roll/bank-axis. A roll value of 45 makes the item roll 45 degre" +
				"es to the right, while a roll of -50 makes it roll 50 degrees to the left\",\"type" +
				"\":\"double\"}]}]},{\"name\":\"velocity\",\"doc\":\"Optional velocity of the item\",\"defaul" +
				"t\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Velocity\",\"namespace\":\"eu.driver" +
				".model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In decimal degrees, ranging f" +
				"rom [0, 360) where 0 is pointing towards the geographic north. The yaw value is " +
				"applied in a clockwise rotation over the item’s heading/yaw-axis. A yaw value of" +
				" 90 makes the item face east, while a yaw of 270 makes it face west\",\"type\":\"dou" +
				"ble\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees, ranging from [-90, 90] where 0 " +
				"is perpendicular to the line crossing the item’s location and the centre of the " +
				"WGS84-based ellipsoid. The pitch value is applied in a counter-clockwise rotatio" +
				"n over the item’s pitch-axis. A pitch value of 45 makes the item face 45 degrees" +
				" upwards, while a pitch of -20 makes it face 20 degrees downwards\",\"type\":\"doubl" +
				"e\"},{\"name\":\"magnitude\",\"doc\":\"In meter per seconds, ranging from [0, infinity) " +
				"where 0 is standing still relative to the earth’s rotation\",\"type\":\"double\"}]}]}" +
				",{\"name\":\"name\",\"doc\":\"Optional name of the item\",\"default\":null,\"type\":[\"null\"," +
				"\"string\"]},{\"name\":\"description\",\"doc\":\"Optional description of the item\",\"defau" +
				"lt\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"type\",\"doc\":\"Optional type of the it" +
				"em\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"owner\",\"doc\":\"Optional uni" +
				"que case-insensitive identifier of the connected application owning the item\",\"d" +
				"efault\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX " +
				"Epoch time in milliseconds marking the time the update was performed\",\"default\":" +
				"null,\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"tags\",\"do" +
				"c\":\"Optional map containing item specific information: key – unique name of the " +
				"specific property; value – value of that property\",\"default\":null,\"type\":[\"null\"" +
				",{\"type\":\"map\",\"values\":\"string\"}]},{\"name\":\"children\",\"doc\":\"Optional list of i" +
				"tem identifiers that belong to this item\",\"default\":null,\"type\":[\"null\",{\"type\":" +
				"\"array\",\"items\":\"string\"}]}]}");
		/// <summary>
		/// Optional location of the item
		/// </summary>
		private eu.driver.model.sim.support.Location _location;
		/// <summary>
		/// Optional orientation of the item
		/// </summary>
		private eu.driver.model.sim.support.Orientation _orientation;
		/// <summary>
		/// Optional velocity of the item
		/// </summary>
		private eu.driver.model.sim.support.Velocity _velocity;
		/// <summary>
		/// Optional name of the item
		/// </summary>
		private string _name;
		/// <summary>
		/// Optional description of the item
		/// </summary>
		private string _description;
		/// <summary>
		/// Optional type of the item
		/// </summary>
		private string _type;
		/// <summary>
		/// Optional unique case-insensitive identifier of the connected application owning the item
		/// </summary>
		private string _owner;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		/// <summary>
		/// Optional map containing item specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		/// <summary>
		/// Optional list of item identifiers that belong to this item
		/// </summary>
		private IList<System.String> _children;
		public virtual Schema Schema
		{
			get
			{
				return AggregatedItem._SCHEMA;
			}
		}
		/// <summary>
		/// Optional location of the item
		/// </summary>
		public eu.driver.model.sim.support.Location location
		{
			get
			{
				return this._location;
			}
			set
			{
				this._location = value;
			}
		}
		/// <summary>
		/// Optional orientation of the item
		/// </summary>
		public eu.driver.model.sim.support.Orientation orientation
		{
			get
			{
				return this._orientation;
			}
			set
			{
				this._orientation = value;
			}
		}
		/// <summary>
		/// Optional velocity of the item
		/// </summary>
		public eu.driver.model.sim.support.Velocity velocity
		{
			get
			{
				return this._velocity;
			}
			set
			{
				this._velocity = value;
			}
		}
		/// <summary>
		/// Optional name of the item
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// Optional description of the item
		/// </summary>
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				this._description = value;
			}
		}
		/// <summary>
		/// Optional type of the item
		/// </summary>
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				this._type = value;
			}
		}
		/// <summary>
		/// Optional unique case-insensitive identifier of the connected application owning the item
		/// </summary>
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				this._owner = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		/// <summary>
		/// Optional map containing item specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		/// <summary>
		/// Optional list of item identifiers that belong to this item
		/// </summary>
		public IList<System.String> children
		{
			get
			{
				return this._children;
			}
			set
			{
				this._children = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.location;
			case 1: return this.orientation;
			case 2: return this.velocity;
			case 3: return this.name;
			case 4: return this.description;
			case 5: return this.type;
			case 6: return this.owner;
			case 7: return this.timestamp;
			case 8: return this.tags;
			case 9: return this.children;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.location = (eu.driver.model.sim.support.Location)fieldValue; break;
			case 1: this.orientation = (eu.driver.model.sim.support.Orientation)fieldValue; break;
			case 2: this.velocity = (eu.driver.model.sim.support.Velocity)fieldValue; break;
			case 3: this.name = (System.String)fieldValue; break;
			case 4: this.description = (System.String)fieldValue; break;
			case 5: this.type = (System.String)fieldValue; break;
			case 6: this.owner = (System.String)fieldValue; break;
			case 7: this.timestamp = (System.Nullable<long>)fieldValue; break;
			case 8: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			case 9: this.children = (IList<System.String>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
