// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.support
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class AggregationPost : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"AggregationPost\",\"namespace\":\"eu.driver.model.sim.suppor" +
				"t\",\"fields\":[{\"name\":\"id\",\"doc\":\"Unique identifier of the aggregation update\",\"t" +
				"ype\":\"string\"},{\"name\":\"map\",\"doc\":\"Map containing key-value pairs, all with uni" +
				"que keys: key – unique identifier of the post; value – specific aggregated post " +
				"properties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"AggrPost\",\"na" +
				"mespace\":\"eu.driver.model.sim.support.aggr\",\"fields\":[{\"name\":\"body\",\"doc\":\"Opti" +
				"onal body text of the post\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"he" +
				"ader\",\"doc\":\"Optional header information of the post\",\"default\":null,\"type\":[\"nu" +
				"ll\",{\"type\":\"record\",\"name\":\"Header\",\"namespace\":\"eu.driver.model.sim.support\",\"" +
				"fields\":[{\"name\":\"from\",\"doc\":\"Sender of the post\",\"type\":\"string\"},{\"name\":\"dat" +
				"e\",\"doc\":\"UNIX Epoch time in milliseconds marking the time the post was publishe" +
				"d/updated\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"to\",\"doc\":\"O" +
				"ptional list of recipients of the post\",\"default\":null,\"type\":[\"null\",{\"type\":\"a" +
				"rray\",\"items\":\"string\"}]},{\"name\":\"cc\",\"doc\":\"Optional list of recipients in car" +
				"bon copy of the post\",\"default\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":\"str" +
				"ing\"}]},{\"name\":\"bcc\",\"doc\":\"Optional list of recipients in blind carbon copy of" +
				" the post\",\"default\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"n" +
				"ame\":\"subject\",\"doc\":\"Optional Subject of the post\",\"default\":null,\"type\":[\"null" +
				"\",\"string\"]},{\"name\":\"intro\",\"doc\":\"Optional introductory text of the post\",\"def" +
				"ault\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"attachments\",\"doc\":\"Optional list " +
				"of (references to) attachments inside the post\",\"default\":null,\"type\":[\"null\",{\"" +
				"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"location\",\"doc\":\"optional location th" +
				"e post is attached to\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Lo" +
				"cation\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"latitude\",\"" +
				"doc\":\"In decimal degrees, ranging from [-90, 90] where 0 is the equator\",\"type\":" +
				"\"double\"},{\"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging from (-180, 180" +
				"] where 0 is the Prime Meridian (line going through the geographic north, Greenw" +
				"ich, and the geographic south)\",\"type\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optio" +
				"nal in meters, where 0 is the surface of the WGS84-based ellipsoid\",\"default\":nu" +
				"ll,\"type\":[\"null\",\"double\"]}]}]}]}]},{\"name\":\"name\",\"doc\":\"Optional name of the " +
				"post\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"tags\",\"doc\":\"Optional ma" +
				"p containing post specific information: key – unique name of the specific proper" +
				"ty; value – value of that property\",\"default\":null,\"type\":[\"null\",{\"type\":\"map\"," +
				"\"values\":\"string\"}]}]}}},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in " +
				"milliseconds marking the time the aggregated update was performed\",\"default\":nul" +
				"l,\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"}],\"_comment\":\"\"}");
		/// <summary>
		/// Unique identifier of the aggregation update
		/// </summary>
		private string _id;
		/// <summary>
		/// Map containing key-value pairs, all with unique keys: key – unique identifier of the post; value – specific aggregated post properties
		/// </summary>
		private IDictionary<string,eu.driver.model.sim.support.aggr.AggrPost> _map;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the aggregated update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		public virtual Schema Schema
		{
			get
			{
				return AggregationPost._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the aggregation update
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Map containing key-value pairs, all with unique keys: key – unique identifier of the post; value – specific aggregated post properties
		/// </summary>
		public IDictionary<string,eu.driver.model.sim.support.aggr.AggrPost> map
		{
			get
			{
				return this._map;
			}
			set
			{
				this._map = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the aggregated update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.map;
			case 2: return this.timestamp;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.map = (IDictionary<string,eu.driver.model.sim.support.aggr.AggrPost>)fieldValue; break;
			case 2: this.timestamp = (System.Nullable<long>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
