// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.support
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class AggregationPOI : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"AggregationPOI\",\"namespace\":\"eu.driver.model.sim.support" +
				"\",\"fields\":[{\"name\":\"id\",\"doc\":\"Unique identifier of the aggregation update\",\"ty" +
				"pe\":\"string\"},{\"name\":\"map\",\"doc\":\"Map containing key-value pairs, all with uniq" +
				"ue keys: key – unique identifier of the point-of-interest; value – specific aggr" +
				"egated point-of-interest properties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"reco" +
				"rd\",\"name\":\"AggrPOI\",\"namespace\":\"eu.driver.model.sim.support.aggr\",\"fields\":[{\"" +
				"name\":\"location\",\"doc\":\"Optional location of the point-of-interest\",\"default\":nu" +
				"ll,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"eu.driver.mode" +
				"l.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"In decimal degrees, ranging f" +
				"rom [-90, 90] where 0 is the equator\",\"type\":\"double\"},{\"name\":\"longitude\",\"doc\"" +
				":\"In decimal degrees, ranging from (-180, 180] where 0 is the Prime Meridian (li" +
				"ne going through the geographic north, Greenwich, and the geographic south)\",\"ty" +
				"pe\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional in meters, where 0 is the surfa" +
				"ce of the WGS84-based ellipsoid\",\"default\":null,\"type\":[\"null\",\"double\"]}]}]},{\"" +
				"name\":\"orientation\",\"doc\":\"Optional orientation of the point-of-interest\",\"defau" +
				"lt\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Orientation\",\"namespace\":\"eu.dr" +
				"iver.model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In decimal degrees, rangi" +
				"ng from [0, 360) where 0 is pointing towards the geographic north. The yaw value" +
				" is applied in a clockwise rotation over the item’s heading/yaw-axis. A yaw valu" +
				"e of 90 makes the item face east, while a yaw of 270 makes it face west\",\"type\":" +
				"\"double\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees, ranging from [-90, 90] wher" +
				"e 0 is perpendicular to the line between the item’s location and the centre of t" +
				"he WGS84-based ellipsoid. The pitch value is applied in a counter-clockwise rota" +
				"tion over the item’s pitch-axis. A pitch value of 45 makes the item face 45 degr" +
				"ees upwards, while a pitch of -20 makes it face 20 degrees downwards\",\"type\":\"do" +
				"uble\"},{\"name\":\"roll\",\"doc\":\"In decimal degrees, ranging from (-180, 180] where " +
				"0 is perpendicular to the line between the item’s location and the centre of the" +
				" WGS84-based ellipsoid. The roll value is applied in a clockwise rotation over t" +
				"he item’s roll/bank-axis. A roll value of 45 makes the item roll 45 degrees to t" +
				"he right, while a roll of -50 makes it roll 50 degrees to the left\",\"type\":\"doub" +
				"le\"}]}]},{\"name\":\"name\",\"doc\":\"Optional name of the point-of-interest\",\"default\"" +
				":null,\"type\":[\"null\",\"string\"]},{\"name\":\"tags\",\"doc\":\"Optional map containing po" +
				"int-of-interest specific information: key – unique name of the specific property" +
				"; value – value of that property\",\"default\":null,\"type\":[\"null\",{\"type\":\"map\",\"v" +
				"alues\":\"string\"}]},{\"name\":\"description\",\"doc\":\"Optional description of the poin" +
				"t-of-interest\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"address\",\"doc\":" +
				"\"Optional address information of the point-of-interest\",\"default\":null,\"type\":[\"" +
				"null\",{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"eu.driver.model.sim.support" +
				"\",\"fields\":[{\"name\":\"street\",\"doc\":\"Optional street name\",\"default\":null,\"type\":" +
				"[\"null\",\"string\"]},{\"name\":\"houseNumber\",\"doc\":\"Optional house number\",\"default\"" +
				":null,\"type\":[\"null\",\"int\"]},{\"name\":\"houseLetter\",\"doc\":\"Optional house letter\"" +
				",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"postalCode\",\"doc\":\"Optional p" +
				"ostal code\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"city\",\"doc\":\"Optio" +
				"nal name of the city\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"state\",\"" +
				"doc\":\"Optional name of the state or province\",\"default\":null,\"type\":[\"null\",\"str" +
				"ing\"]},{\"name\":\"country\",\"doc\":\"Optional name of the country\",\"default\":null,\"ty" +
				"pe\":[\"null\",\"string\"]},{\"name\":\"tags\",\"doc\":\"Optional map containing address spe" +
				"cific information: key – unique name of the specific property; value – value of " +
				"that property\",\"default\":null,\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]}]" +
				"}]},{\"name\":\"entities\",\"doc\":\"Optional list of entity identifiers that are at th" +
				"e point-of-interest\",\"default\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":\"stri" +
				"ng\"}]}]}}},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in milliseconds m" +
				"arking the time the aggregated update was performed\",\"default\":null,\"type\":[\"nul" +
				"l\",\"long\"],\"logicalType\":\"timestamp-millis\"}],\"_comment\":\"\"}");
		/// <summary>
		/// Unique identifier of the aggregation update
		/// </summary>
		private string _id;
		/// <summary>
		/// Map containing key-value pairs, all with unique keys: key – unique identifier of the point-of-interest; value – specific aggregated point-of-interest properties
		/// </summary>
		private IDictionary<string,eu.driver.model.sim.support.aggr.AggrPOI> _map;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the aggregated update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		public virtual Schema Schema
		{
			get
			{
				return AggregationPOI._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the aggregation update
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Map containing key-value pairs, all with unique keys: key – unique identifier of the point-of-interest; value – specific aggregated point-of-interest properties
		/// </summary>
		public IDictionary<string,eu.driver.model.sim.support.aggr.AggrPOI> map
		{
			get
			{
				return this._map;
			}
			set
			{
				this._map = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the aggregated update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.map;
			case 2: return this.timestamp;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.map = (IDictionary<string,eu.driver.model.sim.support.aggr.AggrPOI>)fieldValue; break;
			case 2: this.timestamp = (System.Nullable<long>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
