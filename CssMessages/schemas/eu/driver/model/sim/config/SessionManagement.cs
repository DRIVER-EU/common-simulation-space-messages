// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.config
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class SessionManagement : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""SessionManagement"",""namespace"":""eu.driver.model.sim.config"",""fields"":[{""name"":""id"",""doc"":""Unique case-insensitive identifier of the session"",""type"":""string""},{""name"":""state"",""doc"":""State the session is currently in"",""type"":{""type"":""enum"",""name"":""SessionState"",""namespace"":""eu.driver.model.sim.config"",""symbols"":[""Initializing"",""Started"",""Stopped"",""Closed""]}},{""name"":""name"",""doc"":""Optional name of the session"",""default"":null,""type"":[""null"",""string""]},{""name"":""tags"",""doc"":""Optional map containing session specific information: key – unique name of the specific property; value – value of that property"",""default"":null,""type"":[""null"",{""type"":""map"",""values"":""string""}]},{""name"":""timestamp"",""doc"":""Optional UNIX Epoch time in milliseconds marking the time the update was or needs to be performed"",""default"":null,""type"":[""null"",""long""],""logicalType"":""timestamp-millis""},{""name"":""simulationTime"",""doc"":""Optional UNIX Epoch time in milliseconds marking the fictive date and time the session should run with"",""default"":null,""type"":[""null"",""long""],""logicalType"":""timestamp-millis""}]}");
		/// <summary>
		/// Unique case-insensitive identifier of the session
		/// </summary>
		private string _id;
		/// <summary>
		/// State the session is currently in
		/// </summary>
		private eu.driver.model.sim.config.SessionState _state;
		/// <summary>
		/// Optional name of the session
		/// </summary>
		private string _name;
		/// <summary>
		/// Optional map containing session specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was or needs to be performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the fictive date and time the session should run with
		/// </summary>
		private System.Nullable<long> _simulationTime;
		public virtual Schema Schema
		{
			get
			{
				return SessionManagement._SCHEMA;
			}
		}
		/// <summary>
		/// Unique case-insensitive identifier of the session
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// State the session is currently in
		/// </summary>
		public eu.driver.model.sim.config.SessionState state
		{
			get
			{
				return this._state;
			}
			set
			{
				this._state = value;
			}
		}
		/// <summary>
		/// Optional name of the session
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// Optional map containing session specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was or needs to be performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the fictive date and time the session should run with
		/// </summary>
		public System.Nullable<long> simulationTime
		{
			get
			{
				return this._simulationTime;
			}
			set
			{
				this._simulationTime = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.state;
			case 2: return this.name;
			case 3: return this.tags;
			case 4: return this.timestamp;
			case 5: return this.simulationTime;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.state = (eu.driver.model.sim.config.SessionState)fieldValue; break;
			case 2: this.name = (System.String)fieldValue; break;
			case 3: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			case 4: this.timestamp = (System.Nullable<long>)fieldValue; break;
			case 5: this.simulationTime = (System.Nullable<long>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
