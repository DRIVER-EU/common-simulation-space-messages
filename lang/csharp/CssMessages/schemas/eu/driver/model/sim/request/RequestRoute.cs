// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.request
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class RequestRoute : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"RequestRoute\",\"namespace\":\"eu.driver.model.sim.request\"," +
				"\"fields\":[{\"name\":\"id\",\"doc\":\"Unique case-insensitive identifier of the request\"" +
				",\"type\":\"string\"},{\"name\":\"applicant\",\"doc\":\"Unique case-insensitive identifier " +
				"of the connected application sending the request\",\"type\":\"string\"},{\"name\":\"star" +
				"t\",\"doc\":\"Location that marks the start of the route\",\"type\":{\"type\":\"record\",\"n" +
				"ame\":\"Location\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"lat" +
				"itude\",\"doc\":\"In decimal degrees, ranging from [-90, 90] where 0 is the equator\"" +
				",\"type\":\"double\"},{\"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging from (-" +
				"180, 180] where 0 is the Prime Meridian (line going through the geographic north" +
				", Greenwich, and the geographic south)\",\"type\":\"double\"},{\"name\":\"altitude\",\"doc" +
				"\":\"Optional in meters, where 0 is the surface of the WGS84-based ellipsoid, or a" +
				"nother agreed upon common ground level (specified inside the configuration guide" +
				"lines). A positive number indicates a location outside the ellipsoid (or above t" +
				"he ground level), while a negative number indicates a location inside the ellips" +
				"oid (or below the ground level). If an altitude is not provided, it is presumed " +
				"that the location is at the ground level of the provided latitude and longitude " +
				"coordinates\",\"default\":null,\"type\":[\"null\",\"double\"]}]}},{\"name\":\"waypoints\",\"do" +
				"c\":\"Ordered list of locations to visit consecutively\",\"type\":{\"type\":\"array\",\"it" +
				"ems\":\"eu.driver.model.sim.support.Location\"}},{\"name\":\"moveType\",\"doc\":\"Optional" +
				" type of movement to consider calculating the route\",\"type\":{\"type\":\"enum\",\"name" +
				"\":\"MoveType\",\"namespace\":\"eu.driver.model.sim.support\",\"symbols\":[\"Straight\",\"Cr" +
				"ossCountry\",\"OnlyRoads\",\"RoadsAndCrossCountry\"]}},{\"name\":\"tags\",\"doc\":\"Optional" +
				" map containing route request specific information: key – unique name of the spe" +
				"cific property; value – value of that property\",\"default\":null,\"type\":[\"null\",{\"" +
				"type\":\"map\",\"values\":\"string\"}]}]}");
		/// <summary>
		/// Unique case-insensitive identifier of the request
		/// </summary>
		private string _id;
		/// <summary>
		/// Unique case-insensitive identifier of the connected application sending the request
		/// </summary>
		private string _applicant;
		/// <summary>
		/// Location that marks the start of the route
		/// </summary>
		private eu.driver.model.sim.support.Location _start;
		/// <summary>
		/// Ordered list of locations to visit consecutively
		/// </summary>
		private IList<eu.driver.model.sim.support.Location> _waypoints;
		/// <summary>
		/// Optional type of movement to consider calculating the route
		/// </summary>
		private eu.driver.model.sim.support.MoveType _moveType;
		/// <summary>
		/// Optional map containing route request specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		public virtual Schema Schema
		{
			get
			{
				return RequestRoute._SCHEMA;
			}
		}
		/// <summary>
		/// Unique case-insensitive identifier of the request
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Unique case-insensitive identifier of the connected application sending the request
		/// </summary>
		public string applicant
		{
			get
			{
				return this._applicant;
			}
			set
			{
				this._applicant = value;
			}
		}
		/// <summary>
		/// Location that marks the start of the route
		/// </summary>
		public eu.driver.model.sim.support.Location start
		{
			get
			{
				return this._start;
			}
			set
			{
				this._start = value;
			}
		}
		/// <summary>
		/// Ordered list of locations to visit consecutively
		/// </summary>
		public IList<eu.driver.model.sim.support.Location> waypoints
		{
			get
			{
				return this._waypoints;
			}
			set
			{
				this._waypoints = value;
			}
		}
		/// <summary>
		/// Optional type of movement to consider calculating the route
		/// </summary>
		public eu.driver.model.sim.support.MoveType moveType
		{
			get
			{
				return this._moveType;
			}
			set
			{
				this._moveType = value;
			}
		}
		/// <summary>
		/// Optional map containing route request specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.applicant;
			case 2: return this.start;
			case 3: return this.waypoints;
			case 4: return this.moveType;
			case 5: return this.tags;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.applicant = (System.String)fieldValue; break;
			case 2: this.start = (eu.driver.model.sim.support.Location)fieldValue; break;
			case 3: this.waypoints = (IList<eu.driver.model.sim.support.Location>)fieldValue; break;
			case 4: this.moveType = (eu.driver.model.sim.support.MoveType)fieldValue; break;
			case 5: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
