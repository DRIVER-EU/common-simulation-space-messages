// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.entity
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class Post : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"Post\",\"namespace\":\"eu.driver.model.sim.entity\",\"fields\":" +
				"[{\"name\":\"id\",\"doc\":\"Unique case-insensitive identifier of the post\",\"type\":\"str" +
				"ing\"},{\"name\":\"body\",\"doc\":\"Body text of the post\",\"type\":\"string\"},{\"name\":\"hea" +
				"der\",\"doc\":\"Optional header information of the post\",\"default\":null,\"type\":[\"nul" +
				"l\",{\"type\":\"record\",\"name\":\"Header\",\"namespace\":\"eu.driver.model.sim.support\",\"f" +
				"ields\":[{\"name\":\"from\",\"doc\":\"Sender of the post\",\"type\":\"string\"},{\"name\":\"date" +
				"\",\"doc\":\"UNIX Epoch time in milliseconds marking the time the post was published" +
				"/updated\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"to\",\"doc\":\"Op" +
				"tional list of recipients of the post\",\"default\":null,\"type\":[\"null\",{\"type\":\"ar" +
				"ray\",\"items\":\"string\"}]},{\"name\":\"cc\",\"doc\":\"Optional list of recipients in carb" +
				"on copy of the post\",\"default\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":\"stri" +
				"ng\"}]},{\"name\":\"bcc\",\"doc\":\"Optional list of recipients in blind carbon copy of " +
				"the post\",\"default\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"na" +
				"me\":\"subject\",\"doc\":\"Optional subject of the post\",\"default\":null,\"type\":[\"null\"" +
				",\"string\"]},{\"name\":\"intro\",\"doc\":\"Optional introductory text of the post\",\"defa" +
				"ult\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"attachments\",\"doc\":\"Optional map of" +
				" (references to) attachments inside the post: key – unique reference to the atta" +
				"chment (e.g. URI) or complete string-encoded attachment; value – media type of t" +
				"he attachment (e.g. .pdf, .png, .zip)\",\"default\":null,\"type\":[\"null\",{\"type\":\"ma" +
				"p\",\"values\":\"string\"}]},{\"name\":\"location\",\"doc\":\"Optional location of the sende" +
				"r of the post\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\"," +
				"\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"In" +
				" decimal degrees, ranging from [-90, 90] where 0 is the equator\",\"type\":\"double\"" +
				"},{\"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging from (-180, 180] where " +
				"0 is the Prime Meridian (line going through the geographic north, Greenwich, and" +
				" the geographic south)\",\"type\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional in m" +
				"eters, where 0 is the surface of the WGS84-based ellipsoid, or another agreed up" +
				"on common ground level (specified inside the configuration guidelines). A positi" +
				"ve number indicates a location outside the ellipsoid (or above the ground level)" +
				", while a negative number indicates a location inside the ellipsoid (or below th" +
				"e ground level). If an altitude is not provided, it is presumed that the locatio" +
				"n is at the ground level of the provided latitude and longitude coordinates\",\"de" +
				"fault\":null,\"type\":[\"null\",\"double\"]}]}]}]}]},{\"name\":\"name\",\"doc\":\"Optional nam" +
				"e of the post\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"type\",\"doc\":\"Op" +
				"tional type of the post\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"owner" +
				"\",\"doc\":\"Optional unique case-insensitive identifier of the connected applicatio" +
				"n owning the post\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"timestamp\"," +
				"\"doc\":\"Optional UNIX Epoch time in milliseconds marking the time the update was " +
				"performed\",\"default\":null,\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis" +
				"\"},{\"name\":\"tags\",\"doc\":\"Optional map containing post specific information: key " +
				"– unique name of the specific property; value – value of that property\",\"default" +
				"\":null,\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]}]}");
		/// <summary>
		/// Unique case-insensitive identifier of the post
		/// </summary>
		private string _id;
		/// <summary>
		/// Body text of the post
		/// </summary>
		private string _body;
		/// <summary>
		/// Optional header information of the post
		/// </summary>
		private eu.driver.model.sim.support.Header _header;
		/// <summary>
		/// Optional name of the post
		/// </summary>
		private string _name;
		/// <summary>
		/// Optional type of the post
		/// </summary>
		private string _type;
		/// <summary>
		/// Optional unique case-insensitive identifier of the connected application owning the post
		/// </summary>
		private string _owner;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		/// <summary>
		/// Optional map containing post specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		public virtual Schema Schema
		{
			get
			{
				return Post._SCHEMA;
			}
		}
		/// <summary>
		/// Unique case-insensitive identifier of the post
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Body text of the post
		/// </summary>
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				this._body = value;
			}
		}
		/// <summary>
		/// Optional header information of the post
		/// </summary>
		public eu.driver.model.sim.support.Header header
		{
			get
			{
				return this._header;
			}
			set
			{
				this._header = value;
			}
		}
		/// <summary>
		/// Optional name of the post
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// Optional type of the post
		/// </summary>
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				this._type = value;
			}
		}
		/// <summary>
		/// Optional unique case-insensitive identifier of the connected application owning the post
		/// </summary>
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				this._owner = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		/// <summary>
		/// Optional map containing post specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.body;
			case 2: return this.header;
			case 3: return this.name;
			case 4: return this.type;
			case 5: return this.owner;
			case 6: return this.timestamp;
			case 7: return this.tags;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.body = (System.String)fieldValue; break;
			case 2: this.header = (eu.driver.model.sim.support.Header)fieldValue; break;
			case 3: this.name = (System.String)fieldValue; break;
			case 4: this.type = (System.String)fieldValue; break;
			case 5: this.owner = (System.String)fieldValue; break;
			case 6: this.timestamp = (System.Nullable<long>)fieldValue; break;
			case 7: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
